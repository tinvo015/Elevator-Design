module elevator(CLOCK_50, Reset, closeDoor, KEY);

	input logic CLOCK_50, Reset;

	input logic [2:0] KEY; //user input
	input logic closeDoor;
	

	logic [5:0] inputfloors; // floors that are pressed
	logic [5:0] currentFloor; 
	
	
	
	
	
	
	floor1 f1(.Clock(CLOCK_50), .Reset(Reset), .Done(closeDoor), .KEY(KEY[2:0]), .floor(inputfloors[0]));
	floor2 f2(.Clock(CLOCK_50), .Reset(Reset), .Done(closeDoor), .KEY(KEY[2:0]), .floor(inputfloors[1]));
	floor2m f2m(.Clock(CLOCK_50), .Reset(Reset), .Done(closeDoor), .KEY(KEY[2:0]), .floor(inputfloors[2]));
	floor3 f3(.Clock(CLOCK_50), .Reset(Reset), .Done(closeDoor), .KEY(KEY[2:0]), .floor(inputfloors[3]));
	floor3m f3m(.Clock(CLOCK_50), .Reset(Reset), .Done(closeDoor), .KEY(KEY[2:0]), .floor(inputfloors[4]));
	floor4 f4(.Clock(CLOCK_50), .Reset(Reset), .Done(closeDoor), .KEY(KEY[2:0]), .floor(inputfloors[5]));


	
	
	
	
endmodule
	
	
	
	
module userInput_testbench();
	logic clk;
	logic [3:0] KEY;


	userInput dut (.CLOCK_50(clk), .Reset(KEY[3]), .KEY(KEY));

	// Set up the clock.
	parameter CLOCK_PERIOD=100;
	initial begin
		clk <= 0;
		forever #(CLOCK_PERIOD/2) clk <= ~clk;
	end
	
	// Set up the inputs to the design. Each line is a clock cycle.
	initial begin
																	
		KEY[3] <= 1; 										@(posedge clk);
																@(posedge clk);
		KEY[3] <= 0; KEY[2:0] = 3'b010;				@(posedge clk);
		KEY[2:0] = 3'b110;								@(posedge clk);
																@(posedge clk);
		
		

		 $stop; // End the simulation.
	end
endmodule
 