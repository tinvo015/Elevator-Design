module floorLights (Clock, Reset,SW, Up, Down, HEX0, HEX1, HEX2, HEX5);

	input logic Clock, Reset;
	
	input [5:0] SW;

	input logic Up, Down, NL, NR;

	// HEX0-2 displays floor, HEX5 displays up or down.
	output logic [6:0] HEX0, HEX1, HEX2, HEX5;

	
	enum {one = 3'b000, two = 3'b001, twoM = 3'b010, three = = 3'b011, threeM = 3'b100, four= 3'b101} ps, ns;

	// Next State logic
	always_comb begin
		case (ps)
			one: 	if ((SW[1] | SW[2] | SW[3] | SW[4] | SW[5]) & ~SW[0]) 								ns = two; 
					else 																									ns = one;
			
			two: 	if (Up & (SW[2] | SW[3] | SW[4] | SW[5]) & ~SW[1])										ns = twoM; 
					else if (Down & ~(SW[0] | SW[1]) & (SW[2] | SW[3] | SW[4] | SW[5]) & ~SW[1])  ns = twoM; 
					else if (Down & SW[0] & ~SW[1])									 							ns = one;
					else if (Up & ~(SW[1] | SW[2] | SW[3] | SW[4] | SW[5]) & SW[0])					ns = one;
					else																									ns = two;
			
			twoM: if (Up & (SW[3] | SW[4] | SW[5]) & ~SW[1]) 												ns = three;
					else if (Down & ~(SW[0] | SW[1] | SW[2]) & (SW[3] | SW[4] | SW[5]))				ns = three;
					else if (Down & (SW[0] | SW[1]) & ~SW[2])													ns = two;
					else if (Up & ~(SW[2] | SW[3] | SW[4] | SW[5]) & (SW[0] | SW[1]))					ns = two;
					else 																									ns = twoM;
			
			three: if (Up & (SW[4] | SW[5]) & ~SW[3])															ns = threeM;
					 else if (Down & ~(SW[3] | SW[2] | SW[1] | SW[0]) & (SW[4] | SW[5]))				ns = threeM
					 else if (Down & (SW[2] | SW[1] | SW[0]) & ~SW[3])										ns = twoM;
					 else if (Up & ~(SW[3] | SW[4] | SW[5]) & (SW[2] & SW[1] & SW[0]))				ns = twoM;
					 else																									ns = three;
					 
			threeM: if (Up & SW[5] & ~SW[4])																		ns = four;
					  else if (Down & ~(SW[4] | SW[3] | SW[2] | SW[1] | SW[0]) & SW[5])				ns = four;
					  else if (Down & (SW[3] | SW[2] | SW[1] | SW[0]) & ~SW[4])							ns = three;
					  else if (Up & ~(SW[4] | SW[5]) & (SW[3] | SW[2] | SW[1] | SW[0]))				ns = three;
					  else 																								ns = threeM;
					  
		  four: 	if ((SW[0] | SW[1] | SW[2] | SW[3] | SW[4]) & ~SW[5])									ns = threeM;
					else 																									ns = four;
					
					
					

		endcase
		
		// tells which direction elevator is going
		if (ns > ps) begin
			Up = 1;
			Down = 0;
		end else if (ns < ps) begin
			Up = 0;
			Down = 1;
		else begin
			Up = 0;
			Down = 0;
		end	
	end


	// DFFs
	always_ff @(posedge Clock) begin
		if (Reset)
			ps <= one;
		else
			ps <= ns;
	end

endmodule 
